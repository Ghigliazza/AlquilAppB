<div class="card-body">
  <%= form_with(model: rental) do |form| %>
    <% if rental.errors.any? %>
      <div style="color: red">
        <h2><%= pluralize(rental.errors.count, "error") %> prohibited this rental from being saved:</h2>
        
        <ul>
          <% rental.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

<!----------------------------- CALCULAR HORAS MAXIMAS -------------------------------------->

      <!-- Cuando se crea el alquiler, el numero maximo de horas es determinado por el balance del usuairo --> 
      <% max = 24 %> 
      <% if (@rental.expires == nil) && ((current_user.balance/Rental.states[:started]) <= 24) %>       
        <% max = (current_user.balance / Rental.states[:started]) %>
      <% end %>

      <% if (@rental.expires != nil) %>   
         <!-- El maximo esta limitado a 24 horas TOTALES -->
         <% max = 24 - @rental.total_hours %>

         <!-- Y luego, se limita segun el saldo del usuario -->
         <% if ((current_user.balance/Rental.states[:extended]) < max) %>
           <% max = (current_user.balance/Rental.states[:extended]) %>          
         <% end %>     
      <% end %>


<!----------------------------- FORMULARIO (DEPENDE DEL MAXIMO DE HORAS POSIBLE) -------------------------------------->

  <% if max > 0 %>
    <div style="margin-left:25px; margin-top:15px;">

      <!--
      <#% if @rental.expires != nil%>
        <h1 class="card-title"><i><b>Extender Alquiler</b></i></h1> </p>
      <#% else %>
        <h1 class="card-title"><i><b>Iniciar Alquiler</b></i></h1> </p>
      <#% end %> -->

    <!----------------------------- SELECTOR DE HORAS -------------------------------------->
      <div class="badge text-bg-light" id="inputHoursRange">
        <label for="hsRange" class="form-label"> Indique la cantidad de horas: </label><br>
        <input type="range" id="hsRange" value="1" min=1 max= <%= max %> step="1" oninput="this.nextElementSibling.value = this.value" onchange="calcule_rent()">
        <output id="outHsRange"> 1 </output>
      </div>

          <div>
            <b>Costo Total: </b>
            <%= form.hidden_field :price, :id => "in_price", :value => Rental.states["#{@rental.state}"] %>
            <%# VALORES INICIALES DE PRECIO %>
            $<output id="out_price"> <%= Rental.states["#{@rental.state}"] + (@rental.price != nil ? @rental.price : 0) %> </output>
          </div>

          <%= form.hidden_field :total_hours, :id => "in_hours" %>

    <!----------------------------- DATOS PARA EL USUARIO -------------------------------------->
      <div>
        <b>Saldo:</b> $<%= current_user.balance %>
      </div>

      <div>
        <b>Expira:</b>
        <%= form.hidden_field :expires, :id => "in_expire", :value => Time.now + 1.hour %>
        <%# VALORES INICIALES DE FECHA %>
        <output id="out_expired"> <%= ((@rental.expires != nil ? @rental.expires : Time.now)  + 1.hour).strftime('%Y-%m-%e A las %k:%M:%S') %> </output>
      </div>

      <div>
        <%= form.hidden_field :user_id, :value => current_user.id %>
      </div>

      <div>
        <%= form.hidden_field :car_id, :value => params[:car_id]%>
      </div>


    <!----------------------------- BOTONES DE ALQUILAR/EXTENDER -------------------------------------->
      <div>
        <% if (@rental.expires == nil) %>
          <p>
            <table class="table table-borderless" style="max-width:300px;">
              <tbody>
                <tr>
                  <td>
                    <!-- Guardo el valor inicial del combustible para comparar luego -->
                    <%= form.hidden_field :initial_fuel, :value => Car.where(id: params[:car_id]).first.fuel %>
                    <%= form.button "Alquilar Auto" , type: "submit", :class=> "btn btn-primary" %>
                  </td>
                  <td>
                    <a class="btn btn-secondary" href="/search" role="button">Cancelar</a>
                  </td> 
                </tr>
              </tbody>
            </table> 
          </p>
        <% else %>
          <p>
            <b> Horas alquiladas anteriormente:</b> <%= @rental.total_hours %> </p>
            <table class="table table-borderless" style="max-width:300px;">
              <tbody>
                <tr>
                  <td>
                    <%= form.button "Extender Alquiler" , type: "submit", :class=> "btn btn-primary" %>
                  </td>
                  <td>
                    <a class="btn btn-secondary" href="/rentals/<%= rental.id %>" role="button">Cancelar</a>
                  </td> 
                </tr>
              </tbody>
            </table> 
          </p>
        <% end %>
      </div>
    </div>
  <% else %>

  <!----------------------------- SI NO PUEDE INICIAR/EXTENDER EL ALQUILER -------------------------------------->
 
    <!-- No deberia ser posible llegar a esta pantalla-->
    ERROR: EL ALQUILER NO SE PUEDE EXTENDER/INICIAR

  <% end %>
  <!----------------------------- FIN DEL FORMULARIO -------------------------------------->
<% end %>

<%# ================================================================================================== %>
<script>
  calcule_rent()

  function calcule_rent() {
    const in_price = $('#in_price')
    const out_price = $('#out_price')
    const in_expire = $('#in_expire')
    const out_expired = $('#out_expired')
    const hs = $('#hsRange').val()

    const in_hours = $('#in_hours')

    let date = hs*60*60*1000 //1hs->60m, 1m->60s, 1s->1000ms

    if (<%= @rental.price == nil %>) {
      in_price.val(hs * <%= Rental.states[:started] %>)
      date +=  new Date().getTime()
    } else {
      in_price.val(hs * <%= Rental.states[:extended] %>)
      date += <%= (@rental.created_at + @rental.total_hours.hours).to_i %> * 1000
    }
    date = new Date(date)

    //Actualiza la cantidad de horas totales del alquiler
    if (<%= @rental.total_hours == nil %>) {
      in_hours.val(hs)
    } else {
      in_hours.val(<%= @rental.total_hours %> + hs * 1)
    }

    out_price.val(<%= @rental.price.to_i %> + parseInt(in_price.val()))

    in_expire.val(date_format(date))
    out_expired.val(in_expire.val())
  }

  function date_format(date) {
    let Month   = date.getMonth().toString().length   == 2 ? date.getMonth()+1 : "0" + (date.getMonth()+1)
    let Date    = date.getDate().toString().length    == 2 ? date.getDate()    : "0" + date.getDate()
    let Hours   = date.getHours().toString().length   == 2 ? date.getHours()   : "0" + date.getHours()
    let Minutes = date.getMinutes().toString().length == 2 ? date.getMinutes() : "0" + date.getMinutes()
    let Seconds = date.getSeconds().toString().length == 2 ? date.getSeconds() : "0" + date.getSeconds()
    return `${date.getFullYear()}-${Month}-${Date} A las ${Hours}:${Minutes}:${Seconds}`
  }
</script>